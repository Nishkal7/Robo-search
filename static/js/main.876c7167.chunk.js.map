{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAceA,EAZF,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACE,yBAAKC,UAAW,gDAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,mBACpB,6BACC,4BAAKF,GACL,2BAAIC,MCWMK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEAA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACD,kBAAC,EAAD,CACIC,IAAOD,EACPR,GAAMK,EAAOG,GAAGR,GAChBF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,aCCXW,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAY,OAChB,2BACAA,UAAY,mCACZY,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCCAI,EARA,SAACnB,GACd,OACE,yBAAKoB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEvB,EAAMwB,WCqCEC,G,kBAnCd,aAAc,IAAD,8BACZ,+CAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACd,YAAca,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACZvB,OAAO,GACPM,YAAc,IAJH,E,iFAQO,IAAD,OACnBkB,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACpB,OAAO4B,S,+BAM9B,IAAD,OACHC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAC/C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKX,MAAMjB,YAAY2B,kBAEjE,OAAgC,IAA7BH,KAAKP,MAAMvB,OAAOmC,OACb,0CAGR,yBAAKvC,UAAY,MAChB,wBAAIA,UAAW,UAAf,eACA,kBAAC,EAAD,CAAWW,aAAgBuB,KAAKZ,iBACjC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAU6B,U,GA9BLO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.876c7167.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst {name, email, id}  =props;\r\n\treturn(\r\n\t  <div className =\"bg-light-green dib br3 pa3 ma2 grow shadow-5\">\r\n\t\t <img alt=\"Robots\" src ={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t  <div>\r\n\t\t   <h2>{name}</h2>\r\n\t\t   <p>{email}</p>\r\n\t\t  </div>\r\n\t  </div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n  <div>\r\n\t{\r\n\t\trobots.map((user,i) => {\r\n\t\t  return (\r\n\t\t\t<Card \r\n\t\t     key = {i} \r\n\t\t     id = {robots[i].id} \r\n\t\t     name = {robots[i].name} \r\n\t\t     email = {robots[i].email}\r\n\t\t   />\r\n\t\t);})\r\n\t}\r\n  </div>);\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input\r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype = 'search'\r\n\t\t\tplaceholder = 'Search Robots'\r\n\t\t\tonChange = {searchChange}\r\n\t\t\t/>\t\r\n\t\t</div>\t\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '3px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n constructor(){\r\n \tsuper()\r\n \tthis.state = {\r\n \t\trobots:[],\r\n \t\tsearchfield : '' \r\n \t}\r\n }\r\n\r\ncomponentDidMount (){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t   .then(response => response.json())\r\n\t   .then(users => {this.setState({robots:users})});\r\n}\r\n\r\n onSearchChange = (event) => {\r\n \tthis.setState({searchfield : event.target.value})\r\n }\r\n  render() {\r\n \tconst filteredRobots = this.state.robots.filter(robot =>{\r\n \t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n \t})\r\n \tif(this.state.robots.length === 0)\r\n \t\treturn <h1>Loading...</h1>\r\n \telse{\r\n\treturn (\r\n\t <div className = \"tc\">\r\n\t \t<h1 className= \"f1 mb2\">ROBOFRIENDS</h1>\r\n\t\t\t<SearchBox searchChange = {this.onSearchChange} />\r\n\t\t<Scroll>\t\r\n\t \t<CardList robots = {filteredRobots}/>\r\n\t \t</Scroll>\r\n\t </div>\r\n\t);\r\n }}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}